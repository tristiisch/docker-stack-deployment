name: Deployement Tests

on:
  push:
    branches:
      - "*"
  pull_request:
    types: [opened, synchronize]
    branches:
      - "*"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      CONTAINER_SSH_PORT: "22"
      SSH_KEY_TYPE: "ed25519"
      SSH_KEY_PATH: "$HOME/.ssh/id_ed25519"
      REMOTE_SSH_HOST: "127.0.0.1"
      REMOTE_SSH_PORT: "2222"
      REMOTE_SSH_USER: "president"
      REMOTE_SSH_PASSWORD: "P@ssword!"

    services:
      docker-throw-ssh:
        image: ghcr.io/tristiisch/docker_throw_ssh:latest
        ports:
          - 2222:22
        options: >
          --privileged
          --tty
          -v /sys/fs/cgroup:/sys/fs/cgroup
          --cgroupns=host
          --cap-add=NET_ADMIN
          --cap-add=NET_RAW
          --cap-add=SYS_ADMIN
          --tmpfs /run
          --tmpfs /run/lock
          --tmpfs /tmp

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 1

    - name: Wait for SSH server
      run: |
        echo "docker ps"
        docker ps -a
        echo "mount"
        mount | grep cgroup
        echo "LOGS"
        docker logs $(docker ps -aq | head -n 1)
        echo "Waiting for SSH server at ${{ env.REMOTE_SSH_HOST }}:${{ env.REMOTE_SSH_PORT }} ..."
        timeout 30 bash -c 'while ! nc -zv ${{ env.REMOTE_SSH_HOST }} ${{ env.REMOTE_SSH_PORT }}; do sleep 1; done'
        echo "SSH server port is open."
        ssh-keyscan -v -t ${{ env.SSH_KEY_TYPE }} -p ${{ env.REMOTE_SSH_PORT }} ${{ env.REMOTE_SSH_HOST }} || true
        echo "SSH server is available."
        echo "CONTAINER_NAME=$(docker ps -aq | head -n 1)" >> $GITHUB_ENV

    - name: Retrieve SSH Public Key
      run: |
        PUBLIC_KEY=$(ssh-keyscan -t ${{ env.SSH_KEY_TYPE }} -p ${{ env.REMOTE_SSH_PORT }} ${{ env.REMOTE_SSH_HOST }})
        echo "SSH_KEY_PUBLIC_VALUE=$(echo $PUBLIC_KEY | cut -d' ' -f2-)" >> $GITHUB_ENV

    - name: Generate an ssh-key & copy ssh-key in container
      id: deploy_ssh_key
      run: |
        if [ -n ACT ]; then
          echo "Install sshpass ..."
          sudo apt update
          sudo apt install -y sshpass
          echo "Install sshpass ... Done !"
        fi
        echo "Generate private key"
        ssh-keygen -t "${{ env.SSH_KEY_TYPE }}" -f "${{ env.SSH_KEY_PATH }}" -N "" -o -a 100
        EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
        echo "ssh_key_private<<$EOF" >> $GITHUB_OUTPUT
        cat ${{ env.SSH_KEY_PATH }} >> $GITHUB_OUTPUT
        echo "$EOF" >> $GITHUB_OUTPUT
        echo "Copy public key into ssh server ..."
        sshpass -p "${{ env.REMOTE_SSH_PASSWORD }}" \
          ssh-copy-id -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no \
            -i "${{ env.SSH_KEY_PATH }}.pub" \
            -p "${{ env.REMOTE_SSH_PORT }}" \
            "${{ env.REMOTE_SSH_USER }}@${{ env.REMOTE_SSH_HOST }}"
        echo "Copy public key into ssh server ... Done !"
        echo "Init docker swarm cluster ..."
        ssh -i "${{ env.SSH_KEY_PATH }}" -o 'UserKnownHostsFile=/dev/null' -o 'StrictHostKeyChecking=no' -p "${{ env.REMOTE_SSH_PORT }}" "${{ env.REMOTE_SSH_USER }}@${{ env.REMOTE_SSH_HOST }}" docker swarm init
        echo "Init docker swarm cluster ... Done !"

    - name: Start Deployment 1 - Basic
      uses: ./
      with:
        deployment_mode: docker-swarm
        remote_docker_host: "${{ env.CONTAINER_NAME }}"
        remote_docker_port: "${{ env.CONTAINER_SSH_PORT }}"
        remote_docker_username: "${{ env.REMOTE_SSH_USER }}"
        ssh_private_key: "${{ steps.deploy_ssh_key.outputs.ssh_key_private }}"
        ssh_public_key: "${{ env.SSH_KEY_PUBLIC_VALUE }}"
        stack_file_path: ./tests/docker-compose.yml
        stack_name: nginx_1

    - name: Start Deployment 2 - No pub key
      uses: ./
      with:
        deployment_mode: docker-swarm
        remote_docker_host: "${{ env.CONTAINER_NAME }}"
        remote_docker_port: "${{ env.CONTAINER_SSH_PORT }}"
        remote_docker_username: "${{ env.REMOTE_SSH_USER }}"
        ssh_private_key: "${{ steps.deploy_ssh_key.outputs.ssh_key_private }}"
        stack_file_path: ./tests/docker-compose.yml
        stack_name: nginx_2

    - name: Start Deployment 3 - Background deploy
      uses: ./
      with:
        deployment_mode: docker-swarm
        remote_docker_host: "${{ env.CONTAINER_NAME }}"
        remote_docker_port: "${{ env.CONTAINER_SSH_PORT }}"
        remote_docker_username: "${{ env.REMOTE_SSH_USER }}"
        ssh_private_key: "${{ steps.deploy_ssh_key.outputs.ssh_key_private }}"
        stack_file_path: ./tests/docker-compose.yml
        stack_name: nginx_3
        deploy_foreground: false

    - name: Start Deployment 4 - Debug
      uses: ./
      with:
        deployment_mode: docker-swarm
        remote_docker_host: "${{ env.CONTAINER_NAME }}"
        remote_docker_port: "${{ env.CONTAINER_SSH_PORT }}"
        remote_docker_username: "${{ env.REMOTE_SSH_USER }}"
        ssh_private_key: "${{ steps.deploy_ssh_key.outputs.ssh_key_private }}"
        ssh_public_key: "${{ env.SSH_KEY_PUBLIC_VALUE }}"
        stack_file_path: ./tests/docker-compose.yml
        stack_name: nginx_4
        debug: true
